import "standard/gl.rf";
import "standard/glfw.rf";
import "standard/io.rf";
import "standard/math.rf";

int main() {
    using GLFW;
    using GL;
    using std;
    
    glfwInit();
    
    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
    
    GLFWwindow* window = glfwCreateWindow(1080, 720, "Boo", nullptr, nullptr);
    
    glfwMakeContextCurrent(window);
    gladLoadGL();
    glClearColor(0.2f, 0.3f, 0.8f, 1.0f);
    
    GLuint vao;
    glGenVertexArrays(1, &vao);
    glBindVertexArray(vao);
    
    float[] data = {
        -0.5f, -0.5f,
        0.5f, -0.5f,
        0.0f, 0.5f
    };
    
    GLuint vbo;
    glGenBuffers(1, &vbo);
    glBindBuffer(BufferTarget.GL_ARRAY_BUFFER, vbo);
    glBufferData(BufferTarget.GL_ARRAY_BUFFER, sizeof(data), data, BufferUsageHint.GL_STATIC_DRAW);
    glVertexAttribPointer(0, 2, Datatype.GL_FLOAT, GL_FALSE, 2 * sizeof(float), (void*)0);
    glEnableVertexAttribArray(0);

    vec4 v1;
    vec4 v1c;
    mat4 m1;
    mat4 m2;
    mat4 i_m2;
    m_identity(&m1);

    v1 = (vec4) { .x = 3, .y = 4, .z = 2, .w = 1 };    
    v1c = v1;

    /* this doesn't work (maybe i shouldn't cast float[] to float*?)
    m2 = (float *) {
        2.0f, 3.0f, 4.0f, 0.0f,
        1.0f, 2.0f, 3.0f, 4.0f,
        0.0f, 0.0f, 3.0f, 2.0f,
        1.0f, 5.0f, 6.0f, 1.0f
    };
    */

    m2 = (mat4) { .m = {
        1.0f, 0.0f, 0.0f, 0.0f,
        3.0f, 1.0f, 0.0f, 0.0f,
        1.0f, 0.0f, 2.0f, 0.0f,
        2.0f, 0.0f, 0.0f, 1.0f
    }, .flags = mat_flags.M_STANDARD };

    i_m2 = m_inverse(m2);

    mat3 test = m_minor(m2, 1, 3);

    v1c = i_m2 * v1c;
    v1c = m2 * v1c;

    i_m2 = i_m2 * m2;
    v1 = v1 - v1c;
    
    m_print(i_m2);

    //printf("%f, %f, %f, %f,\n", v1.x, v1.y, v1.z, v1.w);
    
    while (!glfwWindowShouldClose(window)) {
        glfwPollEvents();
        
        glClear(BufferBits.GL_COLOR_BUFFER_BIT);
        glDrawArrays(Primitive.GL_TRIANGLES, 0, 3);
        
        glfwSwapBuffers(window);
    }
    
    glfwDestroyWindow(window);
    glfwTerminate();
    return 0;
}
